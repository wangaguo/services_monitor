class WebServicesChecker
  require 'net/http'

  OpenSSL::SSL::VERIFY_PEER = OpenSSL::SSL::VERIFY_NONE
  @now_service = ""

  def fetch(uri_str, limit = 10)
    puts "---> #{uri_str}"

    begin
      raise ArgumentError, 'HTTP redirect too deep' if limit == 0

      response = nil
      Timeout::timeout(20) do |length|
        response = Net::HTTP.get_response(URI.parse(uri_str))
      end
    rescue
      logger("#{@now_service} {#{$!}}", :error)
      return "#{@now_service} {#{$!}}"
    end

    case response
    when Net::HTTPSuccess, Net::HTTPUnauthorized, Net::HTTPNotImplemented then
      logger("#{@now_service} ok!!")
      return true
    when Net::HTTPRedirection then
      puts "redir to: #{response['location']}"
      fetch(response['location'], limit - 1)
    else
      logger("#{@now_service} (#{response.code})", :error)
      return "#{@now_service} {#{response.code}}"
    end
  end

  def checker(conf, log)
    begin
     retry_max = conf["retry_max"] || 1
     wait_sec = conf["wait_sec"] || 1
     retry_count = 0
     error_services = ""
     fetch_total = 0
     fetch_retry = 0

     services = conf["services"] || []
     services.each do |s, url|
       @now_service = s
       fetch_s = Time.now
       hr = fetch(url)
       fetch_e = Time.now
       fetch_retry += fetch_e - fetch_s
       puts "run time: #{fetch_retry}s"
       if hr != true then
         retry_count += 1
         if retry_count < retry_max then
           sleep wait_sec
           redo
         else
           error_services += ";" if error_services != ""
           error_services += " #{hr}"
         end
       end
       fetch_total += fetch_retry
       #log.info "#{s}, #{fetch_retry}s"
       fetch_retry = 0
       retry_count = 0
     end

     logger("fetch total time: #{fetch_total}s")
     if error_services != "" then
       return "Web failed: #{error_services}"
     else
       return ""
     end
    rescue
      return "Exception: #{$!}"
    end
  end
end
